
self.__class__().__mbrs__()

import "assert"

var s = "hello"
s += " world"
s
assert.equal(s, "hello world")

//error: call func '__mbrs__' or return itself?
//s.__class__.__mbrs__
var i int = 100
i
assert.equal(i, 100)

var arr Array<int> = [1,2,3]
arr.append(100)
//arr.append("hello")
arr
assert.equal(arr[0] + i, 101)

//arr[0] + s

const NAME = "James Chu"
assert.equal(NAME, "James Chu")

// error: cannot assign to const 'NAME'
//NAME = "Jacky Chu"

// error: cannot assign to const 'NAME'
/*
func change_const() {
  NAME = 123
}
*/

// error: invalid statement(not allowed to define in func)
func define_const() {
  //const VAL = 123
}

func test() int {
  100 + 200
}

func test2(v int) int {
  100 + v
}

assert.equal(test(), 300)
assert.equal(test2(2), 102)

func add(a int, b int) int {
  var a1 int
  var a2 int
  a1 = 100
  a2 = a1 * 2
  {
    var b1 = 200
    var b2 = 200
    //var a1 int
    a1 = b1 + b2
    a2 = b1 - b2
    b1 - b2
  }
  //retur`n a1 + a2 + a + b
  a1 + a2 + a + b
  //return "hello"
}

assert.equal(add(10, 10), 420)

func test_if(a int, b int) int {
  res := 0
  if a > b {
    res = a - b
  }
  return res
}

assert.equal(test_if(1, 2), 0)
assert.equal(test_if(2, 1), 1)
assert.equal(test_if(3, 3), 0)

func test_if2(a int, b int) int {
  res := 0
  if a > b {
    res = a - b
  } else if a < b {
    res = b - a + 10
  }
  res
}

assert.equal(test_if2(1, 2), 11)
assert.equal(test_if2(2, 1), 1)
assert.equal(test_if2(3, 3), 0)

func test_if3(a int, b int) int {
  res := 0
  if a > b {
    res = a - b
  } else if a < b {
    res = b - a + 10
  } else {
    res = 1234
  }
  res
}

assert.equal(test_if3(1, 2), 11)
assert.equal(test_if3(2, 1), 1)
assert.equal(test_if3(3, 3), 1234)

func test_if4(a int, b int) int {
  res := 0
  if a > b {
    a - b
  } else if a < b {
    b - a + 10
  } else {
    1234
  }
  res
}

assert.equal(test_if4(1, 2), 0)
assert.equal(test_if4(2, 1), 0)
assert.equal(test_if4(3, 3), 0)

res := -1
a := 2
b := 3
if a > b {
  res = a - b
} else if a < b {
  res = b - a + 10
} else {
  res = 1234
}
assert.equal(res, 11)

a = 3
b = 2
if a > b {
  res = a - b
} else if a < b {
  res = b - a + 10
} else {
  res = 1234
}
assert.equal(res, 1)

a = 3
b = 3
if a > b {
  res = a - b
} else if a < b {
  res = b - a + 10
} else {
  res = 1234
}
assert.equal(res, 1234)

func test_if5(a int, b int) int {
  res := 0
  if a >= b {
    if a > b {
      res = a - b
    } else {
      res = 1
    }
  } else {
    res = b - a
  }
  res
}

res = 0
a = 10
b = 3
while a > b {
  res -= 1
  a -= 2
}
assert.equal(res, -4)

while a > b {
  res -= 1
  a -= 2
}
assert.equal(res, -4)

func test_while(a int, b int) int {
  res := 0
  while a > b {
    res -= 1
    a -= 1
  }
  res
}

func test_while2(arr [int]) int {
  res := 0
  i := 0
  size := arr.length()
  while i < size {
    res += arr[i]
    i += 1
  }
  return res
}

arr2 := [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]

assert.equal(test_while(10, 1), -9)
assert.equal(test_while2(arr2), 165)

func test_for(arr [int]) int {
  res := 0
  var v int
  for v in arr {
    res += v
  }
  return res
}

func test_for2(arr [int]) int {
  res := 0
  v := 0
  for v in arr by 2 {
    res += v
  }
  return res
}

func test_for3(arr [int]) int {
  res := 0
  v := 0
  step := 1
  for v in arr by step {
    res += v
    step += 1
  }
  return res
}

func test_for4(arr [int]) int {
  res := 0
  for v in arr {
    res += v
  }
  return res
}

assert.equal(test_for(arr2), 165)
assert.equal(test_for2(arr2), 69)
assert.equal(test_for3(arr2), 27)
assert.equal(test_for4(arr2), 165)

for i in 1...10 {
  sum := 0
  sum += i
  res = sum
}

assert.equal(res, 10)

1...10
(1...10)[-1]
assert.equal((1...10)[0], 1)
assert.equal((1...10)[9], 10)
(1...10)[10]
assert.equal((1...10).length(), 10)

1..<10
(1..<10)[-1]
assert.equal((1..<10)[0], 1)
assert.equal((1..<10)[8], 9)
(1..<10)[9]
(1..<10)[10]
assert.equal((1..<10).length(), 9)

func test_range(start int, end int) int {
  res := 0
  for v in start...end {
    res += v
  }
  res + 1000
}

func test_range2(start int, end int) int {
  res := 0
  for v in start..<end {
    res += v
  }
  res
}

assert.equal(test_range(1, 10), 1055)
assert.equal(test_range2(1, 10), 45)

func test_jmp(arr [int]) int {
  res := 0
  for v in arr {
    if v < 10 {
      continue
    }
    res = res + v
  }
  res
}

func test_jmp2(arr [int]) int {
  res := 0
  for v in arr {
    if v > 10 {
      break
    }
    res += v
  }
  res
}

func test_jmp3(arr [int]) int {
  res := 0
  i := 0
  size := arr.length()
  while i < size {
    if i > 5 {
      break
    }
    res += arr[i]
    i += 1
  }
  return res
}

func test_jmp4(arr [int]) int {
  res := 0
  i := 0
  size := arr.length()
  while i < size {
    if i < 5 {
      i += 1
      continue
    }
    res += arr[i]
    i += 1
  }
  return res
}

assert.equal(test_jmp(arr2), 150)
assert.equal(test_jmp2(arr2), 25)
assert.equal(test_jmp3(arr2), 25)
assert.equal(test_jmp4(arr2), 150)

/*
func test_cond(a int, b int) int {
  a > b ? a - b : b - a
}

assert.equal(test_cond(10, 10), 0)
assert.equal(test_cond(10, 20), 10)
assert.equal(test_cond(20, 10), 10)
assert.equal(test_cond(20, 20), 0)

func sub(a int, b int) int {
  a - b
}

func test_cond2(a int, b int) int {
  a > b ? sub(a, b) : sub(b, a)
}

assert.equal(test_cond2(10, 20), 10)
assert.equal(test_cond2(20, 10), 10)
assert.equal(test_cond2(20, 20), 0)
*/

func arr_reverse(arr [int]) [int] {
  //if arr != nil {
    i := 0
    j := arr.length() - 1
    var v int
    while i < j {
      v = arr[i]
      arr[i] = arr[j]
      arr[j] = v
      i += 1
      j -= 1
    }
    arr
  //}
}

assert.equal(arr2[0], 1)
assert.equal(arr2[9], 50)
arr_reverse(arr2)
assert.equal(arr2[0], 50)
assert.equal(arr2[9], 1)

anony := func(v1 int, v2 int) int {
  v1 + v2 + 100
}
assert.equal(anony(1, 2), 103)

anony = func(v1 int, v2 int) int {
  v1 + v2 + arr[3]
}
assert.equal(anony(1, 2), 103)

func foo() int {
  return func(v1 int, v2 int) int { v1 - v2 + 100}(1,2)
}

func bar() int {
  v1 := 1
  return func(v2 int) int { v1 - v2 + 100}(2)
}

assert.equal(foo(), 99)
assert.equal(bar(), 99)

func foov(v1 int, v2 int) int {
  return func(v3 int) int { v1 - v3 + 100}(v2)
}

assert.equal(foov(100, 200), 0)

func barv(v1 int, v2 int) int {
  v3 := 1
  v4 := 2
  return func(vv2 int, vv3 int) int {
    v1 + vv2 + vv3 + v4
  } (v2, v3)
}

func foov1(v1 int) int {
  g := func(v2 int) int { v1 - v2 + 100}
  return g(2)
}

func foov2(v1 int) func(int) int {
  lv := 100
  return func(v2 int) int { v1 - v2 + 100 + lv}
}

g := foov2(100)
assert.equal(g(50), 250)
assert.equal(foov2(100)(200), 100)

//error: expr is not a func
//foov2(100)(200)(300)

func foov3(fn func(int) int, v1 int) int {
  return fn(v1) + 500
}

func fn(v1 int) int {
  v1 + 200
  //100
}

assert.equal(foov3(fn, 100), 800)

class Animal {
  name string;
  type string;
  age int;
  func __init__() {
    type = "Cat"
  }
}

an := new Animal()
assert.equal(an.type, "Cat")
an.name = "WangWang"
an.type = "dog"
an.age = 24
an
assert.equal(an.name, "WangWang")
assert.equal(an.type, "dog")
assert.equal(an.age, 24)

func get_age(ani Animal) int {
  ani.age
}

assert.equal(get_age(an), 24)

an.age = 25
assert.equal(get_age(an), 25)

func get_age_cl(ani Animal) func() int {
  return func() int {ani.age}
}

cl := get_age_cl(an)
assert.equal(cl(), 25)
an.age = 28
assert.equal(cl(), 28)

func get_age_cl2(age int) func() int {
  ani := new Animal()
  ani.age = age
  i := 100
  cl := func() int {ani.age + i}
  i += 123
  return cl
}

cl2 := get_age_cl2(20)
assert.equal(cl2(), 243)
assert.equal(cl2(), 243)

class Dog {
  name string
  age int

  func __init__(name string, age int) {
    self.name = name
    self.age = age
  }

  func get_name() string {
    name
  }

  func get_age() int {
    age
  }
}

// error: 'Dog' args are not mached
// new Dog()

dog := new Dog("LittleErHa", 30)

dog.__class__().__mbrs__()

assert.equal(dog.name, "LittleErHa")
assert.equal(dog.age, 30)
dog.name = "ErHa";
dog.age = 31;
assert.equal(dog.get_name(), "ErHa")
assert.equal(dog.get_age(), 31)

func get_dog_age(age int) func() int {
  dog := new Dog("LittleErHa", 30)
  dog.age = age
  i := 100
  cl := func() int {dog.age + i}
  i += 456
  return cl
}

cl = get_dog_age(10)
assert.equal(cl(), 566)

const kdog = new Dog("LittleErHa", 20)
kdog.name
// ok
kdog.age = 26
assert.equal(kdog.age, 26)

// error: cannot assign to const 'kdog'
//kdog = dog

// import tests
import "io"
io.__class__().__mbrs__()
io.println(s)
io.print(s)
assert.equal(io.__name__, "io")

import mylang "lang"
mylang.__class__().__mbrs__()
mylang.disassemble(test_cond)

disassemble(disassemble)
disassemble(test_cond)
disassemble(arr_reverse)
disassemble(get_dog_age)

new Dog("LittleErHa", 20).get_age()

//valgrind big data??? 1000_000
arr3 := [new Dog("LittleErHa", 20)]
for i in 1...20 {
  arr3[i] = new Dog("ErHa", 20 + i)
}
//new Array<int>()

// 1000_000, time cost:
// debug: 5.154327s
// release: 4.303628s
// openjdk 11.0.4:
// cost: 6.734s(the same machine)
func test_cost() {
  var dog Dog
  for i in 1...20 {
    dog = arr3[i]
    //dog.get_name()
    //dog.get_age()
    io.println(dog.get_name())
    io.println(dog.get_age())
  }
}
test_cost()

enum Result2 {
  Ok,
  Err(int, string),
}

Result2.Ok

// error: enum 'Err' needs values
Result2.Err

// error: expected 'string', but found 'int'
Result2.Err(1, 2)
Result2.Err(1, "hello")

import "assert"

ok := Result2.Ok
assert.equal(ok, Result2.Ok)

err := Result2.Err(1, "foo")
assert.equal(err, Result2.Err(1, "foo"))

ok == err

var ok2 Result2 = Result2.Ok

enum Option<T> {
  None,
  Some(T),
}

// error: type parameter 'T' could not inferred.
Option.None
Option.<int>.None
var opt Option<int> = Option.<int>.None
opt = Option.Some(100)

{
  func is_some() bool {
    return (self ~= Some(_)) ? false : true
  }

  func is_none() bool {
    return (self ~= None) ? true : false
  }
}

opt := Option.None
opt
opt.is_some()
opt.is_none()
Option.None.is_some()
Option.Some(1, "foo").is_none()

opt = Option.Some(1, "foo")
opt.is_some()
opt.is_none()

opt = Option.None
opt.is_some()
opt.is_none()

opt == Option.Some(1, "foo")
assert.equal(Option.Some(1, "foo").is_some(), true)

var opt2 Option = Option.None
opt2
opt2.is_some()
opt2.is_none()

/*
// auto detect enum from var's type
var opt3 Option = Some(2+3, "bar")
opt3
opt3.is_some()
opt3.is_none()
//how to auto detect in assignment ?
opt3 = None
opt3
opt3.is_some()
opt3.is_none()

var opt4 Option = None
opt4
opt4.is_some()
opt4.is_none()
//how to auto detect in assignment ?
opt4 = Some(2, "bar")
opt4
opt4.is_some()
opt4.is_none()
*/

/*
// not allowed, type maybe not equal. opt := Option.None
// use if Option.Some(x, y) = opt
Option.Some(x, y) = Option.Some(1, "bar")
Option.Some(x, y) = opt
*/

func add(i int, j int) int {
  return i + j
}

func fib(n int) int {
  if n <= 1 {
    return n
  }
  return fib(n-1) + fib(n-2)
}

func fib2(n int) int {
  if n <= 1 {
    return n
  }

  f1 := 0
  f2 := 1
  f3 := 0
  for i in 2...n {
    f3 = f1 + f2;
    f1 = f2;
    f2 = f3;
  }
  return f3
}

arr := new Array<int>()

for i in 0...50 {
  arr.append(0)
}

func fib3(n int) int {
  if n <= 1 {
    return n
  }

  if (arr[n] != 0) {
    return arr[n]
  }

  val := fib3(n-1) + fib3(n-2)
  arr[n] = val
  return val
}

import "io"

for i in 1...9 {
  for j in 1...i {
    io.print(j)
    io.print("x")
    io.print(i)
    io.print("=")
    io.print(i*j)
    io.print(" ")
  }
  io.println("")
}

func show() {
  for i in 0...3 {
    io.println(i)
  }
}

import "io"

func foo(args ...int) {
  io.println(args[0])
  io.println(args[1])
  io.println(args[2])
}

foo()
foo(100, "bar")
foo("foo", 200)
foo("foo", "bar")
foo(100, 200)

func bar(s string, args ...any) {
  io.println(s)
  io.println(args[0])
  io.println(args[1])
}

bar("bar", 100, 200)
bar("bar")
bar()

import "fmt"

fmt.format("hello, {}, {}!\n", "james", 118)
printf("hello, {}, {}!\n", "james", 118)
