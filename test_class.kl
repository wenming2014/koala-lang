
import "io"

class Pet {
  name string = "Hello-Petty"

  func bark() {
    io.println(name)
  }
}

pet := new Pet()
pet.bark()

class Cat {
  name string
  age = 12

  func __init__(n string) {
    name = n
  }

  func bark() {
    io.println(name)
  }
}

cat := new Cat("Kitty")
cat.bark()
cat.age

import "io"

class Base {
  name = "Base"

  func hello() string {
    name
  }
}

class Sub extends Base {
  name = "Sub"

  func subhello() {
    io.println(name)
    io.println(super.name)
  }
}

sub := new Sub()
sub.name
sub.hello()
sub.subhello()

var base Base = new Sub()
base.name
base.hello()
base.subhello(); //error: 'subhello' is not found

import "io"

class Foo {
  name string

  func __init__(name string) {
    self.name = name
  }

  func hello() {
    io.println("hello in Foo")
  }

  func foohello() {
    hello()
  }
}

class Bar extends Foo {
  name string
  age int

  func __init__(name string, age int) {
    super(name + "-In-Foo")
    self.name = name
    self.age = age
  }

  func hello() {
    io.println("hello in Bar")
    io.println(name)
    io.println(age)
    io.println(super.name)
    super.hello()
    // recursive call
    //foohello()
  }
}

bar := new Bar("BAR", 123)
bar.hello()
bar.foohello()

func hello_foo(foo Foo) {
  //if foo != nil {
    foo.hello()
  //}
}

hello_foo(bar)
hello_foo(new Bar("BAR", 100))
var foo Foo = new Bar("Foo_Bar", 100)
hello_foo(foo)

func get_foo() Foo {
  return new Bar("BAR", 200)
}

foo = get_foo()
foo.hello()
get_foo().hello()
bar = get_foo(); // expected 'Bar', but found 'Foo'
bar = get_foo() as Bar;  // downcasting
bar.hello()
var who any = get_foo()
(who as Bar).hello()
(who as Foo).hello()

func get_foo_byname(name string) Foo {
  return name == "foo" ? new Foo("Foo") : new Bar("Bar", 200)
}
foo = get_foo_byname("foo")
foo.hello()
foo = get_foo_byname("bar")
foo.hello()

func get_foo_byname2(name string) Foo {
  name == "foo" ? new Foo("Foo") : new Bar("Bar", 200)
}
foo = get_foo_byname2("foo")
foo.hello()
foo = get_foo_byname2("bar")
foo.hello()

func get_foo_byname3(name string) Foo {
  if name == "foo" {
    return new Foo("Foo")
  } else {
    return new Bar("Bar", 200)
  }
}
foo = get_foo_byname3("foo")
foo.hello()
foo = get_foo_byname3("bar")
foo.hello()

class TestError {
  // name string = super(); //error: super must be used in method
  name string

  //func __init__(val int) { // SubError: error: require call super
  func __init__() {
    //super(); // error: no super exist
    //super(123); // error: super requires no arguments
    name = "TestError"
    //super()
  }

  func hello() {
    //super(); // error: call to super must be in __init__
  }
}

class SubError extends TestError {
  func __init__() {}
}

/*
abstract class Pet {
  name string
  func __init__(name string) {
    self.name = name
  }

  func bark() string
}

class Dog extends Pet {

  func __init_() {
    super("ErHa")
  }

  func bark() string {
    msg := name + "dog is barking"
    io.println(msg)
  }
}


import "io"

trait Animal {
  func bark() {
    msg := name() + " is barking"
    io.println(msg)
  }
  func name() string
}

trait Bark {
  func bark() {
    msg := " who is barking?"
    io.println(msg)
  }
}

class Dog extends Animal with Bark {
  name = "WangWang"

  func name() string {
    return name
  }
}
*/

import "io"

class Node {
  nxt Node
  val int

  func __init__(val int) {
    self.val = val
  }

  func show() {
    io.print(val)
  }
}

class List {
  head Node
  tail Node
  count int

  func __init__() {
    head = new Node(0)
    tail = head
  }

  func add(node Node) {
    node.nxt = head.nxt
    head.nxt = node
  }

  func append(node Node) {
    tail.nxt = node
    tail = node
  }

  func show() {
    it := head.nxt
    while it != null {
      it.show()
      io.print(", ")
      it = it.nxt
    }
    io.println("")
  }

  func sort() {

  }
}

list := new List()
for i in 1...20 {
  list.add(new Node(i))
}
list.show()

class Pet<T> {
  name T

  func __init__(name T) {
    self.name = name
  }

  func getname() T {
    return name
  }
}

class Cat extends Pet<string> {
  func __init__() {
    super("kitty")
  }
  /*
  func getname() string {
    return name
  }
  */
}

cat := new Cat()
cat.getname()
var pet Pet<string> = cat

class Dog<E> extends Pet<E> {
  func __init__(name E) {
    super(name)
  }
}

dog := new Dog<string>("erha")
var pet3 Pet<string> = dog
