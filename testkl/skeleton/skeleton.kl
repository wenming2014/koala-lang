/*
 * Copyright (c) 2018 James, https://github.com/zhuguangxiang
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package skeleton
//package 123
//package func
//package
//package skeleton skeleton
//import "skeleton"
//import os "io"
//import nio "io"
//import "os"
//import SayHello "os"
//import "io"
//import . "os"

//import
//import 123
//import "io" "io"
//import io "io" io

//constants
const K1 = "Hello, Koala"
const K2 string = "Welcome to Koala-lang"
const K3 = "hello"
const K4 = K1
const K5 = 100

//import "io"
//var K7 int;

//variables
//var SayHello int
//var io int
var v1 = 1
var ch = '汉'
var ok = true
var greeting string = "hello, 汉字"
var total int = 100
var f = 12.04
var vk = K5;

var result = add(1, 2)
var func_callback func(int, int) int = add
var gf func<T, R>(T, R) int = add
var func_cb2 = func_callback
var result2 = func_callback(1, 3)

var v3  = 100

var v5 = sub(1, 2)

var v7 int = sub(1, 2)


var vv1 = 1 + 2 - 3
var vv2 = 1 + '中' //1 + true
var vv3 = 1 + 3.141592653589793
var vv4 = 1 + " 100 "
//var vv5 = 1 + "0xg"
var vv6 = 1 + " 0xdeadbeaf  "
//var vv7 = 1 + " 010 10 "
//var vv8 = 1 + " 0999 "
var vv9 = 1 + "0100"
var vv10 = 1 + K7
//var vv11 = 1 + K1

//var vv2 = 1 + 2 > 3 -1

var (t1, t2) = (1, 2)
var t3 (int, int) = (100, 200)
var t4 = (1, 2)


//function
func add(a int, b int) int {
//  io.Println(a, b);
  aa := "how are you?"
  {
    var cc = 100
    {
      var dd = 300
    }
    var dd = 400
    cc = 1001
    dd = 1002
    //cc, dd = 100, 200, 300
    sub(1,2)
  }
  result := 100
  result = 200
  anony := func(a int) (int, int) {
    (1, 2)
  }
  (a, b) -> {a + b}
  (a)-> {a + b}
  // a, b = anony(1)
  list.map((a, b) -> {a + 2 * b}).filter((f) -> {println("{}", f)})
  return 123
}

func sub(aa int, bb int) (int, int) {
  func_callback(aa, bb)
  var hello int
  //hello += 2;
  {
    return (1, 2)
  }
  return (2, 1, "hello")
}

func mul(a int, b int) int {
  return 1
  ["hello", "汉字"]
  [[1,2], [3,4],[5,6]]
  [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1],
  ]
  var array1 = ["hello", "world", "good", "luck"]
  var array2 [[int]] = [1,2,3]
  arr3 := [1,2,3]
  (a, b) := (1, 2)
  (x, y) = (1, "hello")
  (1, 2, (1,2,3))
  (1)
  (1,)
  var map [string:string] = {"hello": "world", "good": "luck"}
  {
    "k1": "hello",
    "k2": 123,
    "k3": {
      "k31": true,
      "k32": 12.98,
      "k33": [
        1,
        2,
        3
      ],
      "k34": nil
    },
  }
  arr[1:4]
  arr[:]
  arr[:3]
  arr[1+2:-1]

  num := func(a int, b int) int {a + b}
  func() {println("hello")}

  Person() with Dog
  Person() with Dog with cat
  var val = if a > b {a} else {b}
  if a > b {a} else {b}

}

class Person {
  func add(a int, b string) bool {
    a + b
  }
}

class Person extends Animal with Dog with Cat {
  func add(a int, b string) bool {
    a + b
  }
}

class Person<T, R> {
  func add(a T, b R) T {
    a + b
  }
}

class Person<T:Abc, R> {
  func add(a T, b R) T {
    a + b
  }
}

class Person
  <T:Abc,
  R,
  K,
  J>
  extends Animal with Dog {
  func add(a T, b R) T {
    a + b
  }
}

class Person<T:Abc, R, K, J> extends Animal<T, R> with Dog<H, J> {
  func add(a T, b R) T {
    a + b
  }
}

trait Person {
  func add(a int, b string) bool {
    a + b
  }
}

trait Person extends Animal with Dog with Cat {
  func add(a int, b string) bool {
    a + b
  }
}

trait Person<T, R> {
  func add(a T, b R) T {
    a + b
  }
}

trait Person<T:Abc, R> {
  func add(a T, b R) T {
    a + b
  }
}

trait Person<T:Abc, R>
{
  func add(a T, b R) T {
    a + b
  }
}

trait Person
  <T:Abc,
  R,
  K,
  J>
  extends Animal with Dog {
  func add(a T, b R) T {
    a + b
  }
}

trait Person<T:Abc, R>
  extends Animal with Dog

trait Person<T:Abc, R, K, J> extends Animal<T, R> with Dog<H, J> {
  func add(a T, b R) T {
    a + b
    for i in 1..<10 { io.Println(i) }
  }
  func sub<P:How, K:Ok>(a P, b K) How
}

var p Person<string, int> = Person();

var f = func() {1}


func Hello<T: Person>(p T) T {
  t.hello()
}

enum Result<T, E> {
  Ok(T),
  Err(E)
}

enum Option<V>
{
  Name(V),
  None,
  Value(int, string, bool)
}
