/*
 * Copyright (c) 2018 James, https://github.com/zhuguangxiang
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package skeleton

func testmatch(x any) {
  var num = Some(4)

  match num {
    Some(x) if x < 5 => println("less than five: {}", x),
    Some(x) => println("{}", x),
    None => (),
  }

  var x = Some(5);
  var y = 10;

  match x {
    Some(50) => println("Got 50"),
    Some(n) if n == y => println("Matched, n = {:?}", n),
    _ => println("Default case, x = {:?}", x),
  }
  println("at the end: x = {:?}, y = {:?}", x, y);

  var x = 4;
  var y = false;

  match x {
    4 | 5 | 6 if y => println("yes"),
    _ => println("no"),
  }

  match x {
    1 => 1,
    'a' => 'a',
    'a' | 'b' | 'c' => "ABC",
    1 | 2 | 3 => a + b | 2,
    'a' ... 'z' => { println("alpha") },
    true => true,
    false => false,
    1+2 ... 10 => 3...10,
    Ok (x) => "no error",
    Err (e) => "error",
    foo.Some(x) if x > 4 => "value is greater than 4",
    foo.Some(50) => "some",
    foo.Some(x, y, z) => "OK",
    foo.None => "none",
    "hello" => {
      io.puts("hello"); "hello";
    },
    _ => err,
    (0, y) => println("y={}", y),
    (x, 0) => println("x={}", x),
    None => (),
  }
}

func testexpr() {
  [1,2,3]
  [1,2,3,]
  (1,2,3)
  (1,2,3,)
  {"hello": "world", "good": "luck"}
  {"hello": "world", "good": "luck",}
  [
    1,
    2,
    3,
  ]
  [
    [1,2],
    [1,2],
  ]
  foo.bar()
  foo[1:3]
  bar[:3]
  foo[4:]
  bar[:]

  func(a int, b string) Foo {
    a + b
  }

  (a) => 123
  (a, b) => println("hello")
  (a, b) => {println("hello")}
  (a, b) => {println("hello"); 123;}
  (a, b) => {
    println("hello")
  }

  1 + 2 * a / b % c * (-a) | b & c and (~z) or 1 and (not true)
  1 >> 2 << 3
  1 > 2 < 3 >= 4 <= 5 != 6

  a = 1
  a += 2
  a >>= b

  1...3
  1..<4
}

class Person : Dog, Cat {
  func foo(a int) {

  }
}

trait Person : Dog, Cat {
  func foo(a int) {

  }
}

class Person : Dog, Cat;
trait Person : Dog, Cat

enum Result<T, E> {
  Ok(T),
  Err(E),
}

enum Option<V>
{
  Name(V),
  None,
  Value(int, string, bool),
}

func Hello<T: Person>(p T) T {
  t.hello()
}

class Person<T:Abc, R, K, J> : Animal<T, R> , Dog<H, J> {
  func add(a T, b R) T {
    a + b
    for i in 1..<10 { io.Println(i) }
  }
  func sub<P:How, K:Ok>(a P, b K) {How}
}

//constants
const K1 = "Hello, Koala"
const K2 string = "Welcome to Koala-lang"
const K3 = "hello"
const K4 = K1
const K5 = 100

//variables
var v1 = 1
var ch = '汉'
var ok = true
var greeting string = "hello, 汉字"
var total int = 100
var f = 12.04
var vk = K5;

var result = add(1, 2)
var func_callback func(int, int) int = add
var gf func<T, R>(T, R) int = add
var func_cb2 = func_callback
var result2 = func_callback(1, 3)
var p Person<string, int> = Person()

var vv1 = 1 + 2 - 3
var vv2 = 1 + '中' //1 + true
var vv3 = 1 + 3.141592653589793
var vv4 = 1 + " 100 "
//var vv5 = 1 + "0xg"
var vv6 = 1 + " 0xdeadbeaf  "
//var vv7 = 1 + " 010 10 "
//var vv8 = 1 + " 0999 "
var vv9 = 1 + "0100"
var vv10 = 1 + K7

var (t1, t2) = (1, 2)
var t3 (int, int) = (100, 200)
var t4 = (1, 2)

//function
func add(a int, b int) int {
  //  io.Println(a, b);
  aa := "how are you?"
  {
    var cc = 100
    {
      var dd = 300
    }
    var dd = 400
    cc = 1001
    dd = 1002
    //cc, dd = 100, 200, 300
    sub(1,2)
  }
  result := 100
  result = 200
  anony := func(a int) (int, int) {
    (1, 2)
  }

  (a, b) => {a + b}
  (a)=> {a + b}
  // a, b = anony(1)
  list.map((a, b) => {a + 2 * b}).filter((f) => println("{}", f))
  return 123

  ["hello", "汉字"]
  [[1,2], [3,4],[5,6]]
  [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1],
  ]
  var array1 = ["hello", "world", "good", "luck"]
  var array2 [[int]] = [1,2,3]
  arr3 := [1,2,3]
  (a, b) := (1, 2)
  (x, y) = (1, "hello")
  (1, 2, (1,2,3))
  (1)
  (1,)
  var map [string:string] = {"hello": "world", "good": "luck"}
  {
    "k1": "hello",
    "k2": 123,
    "k3": {
      "k31": true,
      "k32": 12.98,
      "k33": [
        1,
        2,
        3,
      ],
      "k34": nil,
    },
  }
  arr[1:4]
  arr[:]
  arr[:3]
  arr[1+2:-1]

  for i in 1..<20 {

  }

  if true {

  } else if false {

  } else {

  }

  while i > 10 {
    break
  }
}
