
func sum(a int, b int) int {
  c := 200 + 300
  return a + b + c
}
jit.go(sum)
sum(1,2)

func sum2(a int, b int) int {
  c := 200 + 100
  return a + b + c
}
jit.go(sum2)
sum2(1,2)

func sum3(a int, b int) int {
  return sum(a, b)
}
jit.go(sum3)
sum3(1,2)

func array(a int, b int) Array<Array<int>> {
  [[100, a, b], [200, 201, 202, 203]]
}

jit.go(array)
array(1,2)

func array2(a int, b int) Array<Array<int>> {
  array(a, b)
}

jit(array2)
arr := array2(1,2)

func array() Array<any> {
  new Array<int>()
}

func new_map() [string: string] {
  map := new Map<string, string>()
  map
}

func new_tuple() (int, string) {
  (404, "Not Found")
}

func new_map2() [string: string] {
  map := {"foo": "bar"}
  map
}

func add(a int, b int) int {
  sum(a, b)
}

func noret(a int, b int) {
  c := a + b
}

func sum2(a int, b int) int {
  val := 100 + a
  val = 200
  noret(a, b)
  return a + b + val;
}

gval := 100

sum(10, 20)

jit(sum)
sum(10, 20)

func fib(n int) int {
  if n < 3 {
    return 1
  }
  return fib(n - 1) + fib(n - 2)
}

fib(30)
jit(fib)
fib(40)

if Option.Some(fn) ~= opt {
  io.println(fn)
  fn(10, -20)
}

class Pet {
  name string
  age int
}

func newobj() Pet {
  pet := new Pet()
  pet
}

func new_pet() Pet {
  new Pet()
}

func testklass(p Pet, age int) int {
  p2 := p
  p2 = p
  return 100
}

class Pet {
  name string
  age int
}
p := new Pet()
p.age = 120
p.name = "MYPET"
jit(testklass)
testklass(p, 100)

func testklass(p Pet, age int) int {
  p.age = age
  p.name = "JIT_PET"
  s := "HELLO"
  s = "WORLD"
  "HELLO WORLD"
  p.age
}
jit.go(testklass)
testklass(p, 100)

class Cat {
  pet Pet
}

func newcat(p Pet) Cat {
  cat := new Cat()
  cat.pet = p
  return cat
}

func testsubscr() int {
  arr := [1,2,3]
  arr[1] = 100
  arr[1]
}

func testsubscr2() string {
  arr := ["foo", "bar", "alpha"]
  arr[1] = "foobar"
  arr[1]
}

func array3(a int, b int) Array<Array<int>> {
  [[100, a, b], [200, 201, 202, 203]]
}

func array4(a int, b int) Array<int> {
  arr := array3(a, b)
  arr[1]
}

jit(array4)
