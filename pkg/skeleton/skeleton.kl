/*
 * Copyright (c) 2018 James, https://github.com/zhuguangxiang
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

//import "native/io"

//constants
const K1 = "Hello, Koala"
const K2 string = "Welcome to Koala-lang"
const K3, K4 = "hello", "world"
const K5 = K1
//const K6 = sub(1,2)

//variables
var v1, v2 = 1, 2
var ch = '汉'
var ok = true
var greeting string = "hello, 汉字"
var total int = 100
var f = 12.04

var result = add(1, 2)
var func_callback func(int, int) int = add

var func_cb2 = func_callback
var result2 = func_callback(1, 3)

var v3, v4 = 100, "world"

var v5, v6 = sub(1, 2)

var v7, v8 int = sub(1, 2)

//var v9 int = add

var vv1 = 1 + 2 - 3
var vv2 = 1 + '中' //1 + true
var vv3 = 1 + 3.141592653589793
var vv4 = 1 + " 100 "
//var vv5 = 1 + "0xg"
var vv6 = 1 + " 0xdeadbeaf  "
//var vv7 = 1 + " 010 10 "
//var vv8 = 1 + " 0999 "
var vv9 = 1 + "0100"

//var vv2 = 1 + 2 > 3 -1

//funcion
func add(a int, b int) int {
}

func sub(a int, b int) (int, int) {
}
/*
//function
func add(a int, b int) int {
  aa := "how are you?"
  {
    var cc = 100
    {
      var dd = 300
    }
    var dd = 400
    //cc, dd = sub(1,2)
  }
  result := 100
  result = 200
  // anony := func(a int) (int, int) {
  //   return 1, 2
  // }
  // a, b = anony(1)
  return 123
}

func sub(aa int, bb int) (int, int) {
  //func_callback(aa, bb)
  var hello int
  //hello += 2;
  {
    return 1, 2
  }
  return 2, 1
}
*/

/*
var array = [3][]string
var array2 = []string{"hello", "world", "good", "luck"}
var array3 = [5]string
var array4 = [5][6]string

var dict = map[string]string{"hello": "world", "good": "luck"}
var dict2 map[string]int = {"hello": "world", "good": "luck"}
var dic3 = map[string]string

var set1 = set[string]{"hello", "汉字"}
var set2 set[string] = {"hello", "汉字"}
var set3 = set[string]

var fn = func(a int, b int) int {
  return a + b
}

//functions
func Add(a int, b int) (r int) {
  {"abc", 1, 2}.length()
  {{1}, {{2,3}, 4}}
  {{1}, {1,2,3}}

  { "hello": "world", "good": "luck"}

  {
    {1, 0, 0},
    {0, 1, 0},
    {0, 0, 1}
  }

  {
    "k1": "hello",
    "k2": 123,
    "k3": {
      "k31": true,
      "k32": 12.98,
      "k33": {
        1,
        2,
        3
      },
      "k34": nil
    },
  }

  {
    1,
    2,
    {"hello": "world", "good": "luck"}
  }

  arr := {1, 2, 3}
  arr[3]

  arr[1:4]
  arr[:]
  arr[:3]
  arr[1+2:-1]

  fn(1, 2, "hello")
  attr.length()

  num := func(a int, b int) int {
    return a + b
  }(100, 200)

}

func forfunc() {
  for i in 1..<10 {
    io.Println(i)
  }
}

func iteratorfunc() {
  for i in {1, 2, 3, 4} {

  }
}

func Main(args []string) {
  var person = (Person() with Hello with World).say("hello")
}

func __init__() {

}

class Person extends Hello {
}

trait World with Hi {

}
*/
