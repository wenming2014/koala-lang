#+TITLE: Koala Language Manual
#+AUTHOR: zhuguangxiang(James)
#+EMAIL: https://github.com/zhuguangxiang
* Koala语言手册

** Hello World

#+BEGIN_SRC
// hello.kl
import "koala/io"

func Main(args [string]) {
  io.Println("Hello, World")
}
#+END_SRC

>
> 编译：koala build hello.kl
>
> 运行：koala run hello
>

** 数据类型

- 基本类型(byte, int, float, bool, char)
- 字符串类型(string)
- 数组类型([int])
- 切片(子数组)(array[2:5])
- 字典(dict)
- 集合(set)
- 闭包类型(func(args) returns)
- 类型别名(typealias)
- 类和特质(class, trait)

*** 基本数据类型
*** 数组和字典形式化描述
数组和字典是一种复合类型，其成员对象的类型可以理解为一种子类型。
Koala提供了一种形式化描述（编译器内建）。

>
> Q: 是否需要提供通用的对象描述（数据类型提供）？两种类型是否需要统一的访问模式呢？
> A: Koala不支持泛型，但是像数组和字典等容器类的数据类型又需要‘子类型’，这就出现了自相矛盾。
Koala解决的办法是：使用形式化的方式描述，通用的容器类对象和形式化方式描述的对象不是同一种类型的对象，不能互相转换。
>

*** 变长数组和固定长度数组
Koala支持变长数组，不支持固定长度数组，因为数组是一个内建的对象，可以理解为基本数据类型，
而不是一个对象。

*** exception
- current thread/coroutine cannot continue to run, must be terminated
e.g. a = 100 / 0, cannot return a value.
- anothter is application's scenario, needs finish handling
e.g. there is not desired records in database.
*** anonymous
- context free
- context sensitive
* Why develop koala-lang?
能用自己开发的语言写程序是不是一件很有意思的事情呢？Koala语言完全出于本人的兴趣，很有意思！
* Language Introduction
数组(array)，子数组(slice)，范围(range)
for循环
字典，集合
class, trait
多重继承 vs MIXIN
trait 不能有带参数的__init__方法，不能实例化
class extends Base with A, B {}
包：一个功能的集合，可以由一个或者多个文件组成。
每一个源码都属于某一个包，有相同包名的源码可以互相访问其成员，
不受文件中符号的权限限制。
同一个包中的不同文件中的符号不能相同。包和C++中的名字空间类似，是一个抽象的概念，
没有文件名或者目录名对应。
包和路经，一个包可以部署到不同路经下，导入包的时候需要指定到具体包，
这里区分了部署形态和包（源码）形态。

- Project And Compile

#+BEGIN_SRC
project
  |-- main
  |    |-- koala
  |    |-- resources
  |-- test
  |    |-- koala
  |    |-- resources
  |-- target
  |    |-- main
  |    |-- test
  |    |-- demo-v1.2.3.kar
  |-- karfile
#+END_SRC

delimiter for -sp and -cp options are both : and ;
> koalac -sp src/ -d pkg/ -cp pkg/:/home/koala/pkg:/home/xx.kar foo/baz foo/bar foo app
> koala -cp dir1:dir2:kar1:kar2 foo a1 a2 a3
> koala -kar xx.kar a1 a2 a3
> kar -cxe demo-v1.2.3.kar xx.klc dir1/
> kpm

* CoRoutine(Fiber) Implementation
- schedule
- create/yield/sleep
- join/detach
- timer
- io
socket, pipe, regular files
- spinlock/mutex/semaphore/signal/rwlock/channel/condition

* Release 0.7.x
** 0.7.1
*** Features
- integer and float supports +, -, *, /, %, >, >=, <, <=, ==, <<, >> etc.
- float mod operator uses a = k * b + r, where k is (int)a/b, integer.
- shift operators are only for integer, not for float.
- "-a" minus expression is supported.
- bool object only supports &&, || and !.
- string only supports '+' operator.
- string has many methods to operate it.
- all operators need checked by compiler.
- float object does not support mod operator
- io.Println supports float type print more friendly. see: expression.kl
*** operands override
- python style or c++ style ? choose python style to define a map which are allowed.
- +,-,*,/,%, relation operands and [] index
- c-lang call koala-lang
** 0.7.2
*** Features
- index operator is supported by array type.
- =empty array=
- ~map object~
*** Improvements
- larger data initialization for array
- larger data initialization for map
** 0.7.3
*** Features
- anonymous function
- reference upper variable in function
