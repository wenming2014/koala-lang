
import "io"

class Pet {
  name string = "Hello-Petty"

  func bark() {
    io.println(name)
  }
}

pet := new Pet()
pet.bark()

class Cat extends Pet {
  name string
  age = 12

  func __init__(n string) {
    name = n
  }

  func bark() {
    io.println(name)
  }
}

cat := new Cat("Kitty")
cat.bark()
cat.age

func bark<T:Pet>(pet T) {
  pet.bark()
}

bark(pet)
bark(cat)

func new_pet<T:Pet>(kind string) T {
  //return new Cat("Kitty")
  //return kind == "pet" ? new Pet() : new Cat("Kitty")
  kind == "pet" ? new Pet() : new Cat("Kitty")
}

func new_pet_array<T>(o T) Array<T> {
  arr := new Array<T>();
  arr.append(new Cat("Kitty")); //error
  arr.append(new Pet()); //error
  arr.append(o) //ok
  return arr
}

func new_pet_array2<T>(o Array<T>) Array<Array<T>> {
  arr := new Array<Array<T>>();
  aaa.append(o) //ok
  return arr
}


pet = new_pet("pet")
pet.bark()
cat = new_pet("cat")
cat.bark()

func bark2<T:Pet>(pet T) {
  pet.bark()
  var p T = pet
  p.bark()
}

bark2(pet)
bark2(cat)


func array_sort<T>(arr Array<T>, cmp func(T, T) int) {

}

func int_cmp(v1 int, v2 int) int {

}

arr := new Array<int>()

array_sort(arr, int_cmp)

///////////////////////////////////////////////////////////

func foo<T>(v T) {
}
foo(123)
foo(new Array<int>())

func bar<T>(arr Array<T>) {
}
bar(123)
bar(new Array<string>())

class Pet<E> {}

class Cat extends Pet<string> {}

class Dog {}

func foobar<T>(v int, pet Pet<T>) {

}
foobar(123, new Pet<string>())
foobar(new Cat())
foobar(new Dog())
