
import "io"

// example1: abstract super call and override method/proto
trait Base {
  func sayhello()
  /*
  func __init__() {
    io.println("base")
  }
  */
}

class SayHello extends Base {
  func sayhello() {
    io.print("hello ")
  }
}

var base Base = new SayHello()
base.sayhello()

say := new SayHello()
say.sayhello()

trait SayWorld extends Base {
  func sayhello() {
    super.sayhello()
    io.println("world")
  }
}

class SayHelloWorld extends SayHello with SayWorld;
// ('SayHelloWorld', 'SayWorld', 'SayHello', 'Base', 'Any')

hw := new SayHelloWorld()
hw.sayhello()

// example2: override base method
trait HelloWorld {
  func sayhello() {
    io.println("Hello World!");
  }
}

class HelloUniverse extends HelloWorld {
  func sayhello() {
    io.println("Hello Universe!")
  }
}

var hello Hello;
hello = new SayHello(); // error
hello = new HelloUniverse()
hello.sayhello(); // Hello Universe!

// example3: multiple traits and no any ovverride
trait Hello {
  func sayhello() {
    io.print("Hello ")
  }
}

trait World {
  func sayworld() {
    io.print("World")
  }
}

class MyHelloWorld extends Hello with World {
  func say() {
    io.println("!")
  }
}

mhw := new MyHelloWorld()
mhw.sayhello()
mhw.sayworld()
mhw.say()
