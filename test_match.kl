
// if-match
import "io"

z := 100
if 100 ~= z {
  io.println("100 ~= z")
}

if z ~= 100 {
  io.println("z ~= 100")
}

if 100 + z ~= 200 {
  io.println("100 + z ~= 200")
}


var y string = "foo"

var x int = 200

import "io"
zz := (100, "foo", 3)
if (100, "foo") ~= zz {
  io.println("if-match")
} else {
  io.println("if-not-match")
}

zz = (100, "foo")
if (x, y) ~= zz {
  io.println("if-match")
  io.println(x + 1)
  io.println(y)
} else {
  io.println("not if-match")
}

if (_, y) ~= zz {
  io.println("if-match")
  io.println(y)
}

if (100, y + 1) ~= zz {
  io.println("if-match")
  io.println(y)
}

zz2 := (100, (200, 300), "foo")

if (100, (200, x), y) ~= zz2 {
  io.println("if-match")
  io.println(x)
  io.println(y)
}

if (100, (200, _), _) ~= zz2 {
  io.println("if-match2")
}

import "io"
if Result.Ok(100) ~= Result.<int, string>.Ok(100) {
  io.println("Result.Ok(100) ~= Result.Ok(100)")
}

if Result.Ok(x) ~= Result.<int, string>.Ok(100) {
  io.println("Result.Ok(x) ~= Result.Ok(100)")
  io.println(x)
}

ok := Result.<int, string>.Ok(100)
if Result.Ok(x) ~= ok {
  io.println("Result.Ok(x) ~= ok")
  io.println(x)
}

ok2 := Result.<string, string>.Ok("foo")
if ok2 ~= ok {
  io.println("ok2 ~= ok")
}

ok3 := Result.<(int, string), int>.Ok((100, "foo"))
ok3.ok()
if Result.Ok((_, y)) ~= ok3 {
  io.println("Result.Ok((_, y)) ~= ok3")
  io.println(y)
}

if Result.Ok(x) ~= Result.<int,int>.Err(100) {
  io.println("Result.Ok(x) ~= Result.Err(100)")
  io.println(x)
}

err := Result.<int, (int, string)>.Err((404, "not found"))
if Result.Err((_, y)) ~= err {
  io.println("Result.Err((_, y)) ~= err")
  io.println(y)
}

if (1...10).contains(2) {
  io.println("2 in 1...10")
}

if 100 is int {
  io.println("100 is int")
}

if 100 is string {
  io.println("100 is string")
} else {
  io.println("100 is not string")
}


arr := [(100, "foo"), (200, "bar"), (404, "not found")]
// for statement: variable and tuple only
for (x, y) in arr {

}

/////////////////////////////////////////////////////////////////////////////

i := 100
import "io"

match i {
}

match i {
  _ => io.println("_"),
}

match i {
  100 => io.println("i == 100")
  200 => io.println("i == 200")
}

i = 200
match i {
  _ => io.println("i != 100 and i != 200")
  100 => io.println("i == 100")
  200 => io.println("i == 200")
}

i = 300
match i {
  100 => io.println("i == 100")
  _ => io.println("i != 100 and i != 200")
  200 => io.println("i == 200")
}

match i {
  100 => io.println("i == 100")
  300 => io.println("i == 300")
  200 => io.println("i == 200")
}

match i {
  1...10 => io.println("1...10")
  11..<20 => io.println("11..<20")
  100 => io.println("i == 100")
  _ => io.println("out of 1...10")
}

match i {
  true => io.println("true")
  false => io.println("false")
}

s := "foo"
match s {
  "foo" => io.println("foo")
  "bar" => io.println("bar")
  _ => io.println("other strings")
}

s = "bar"
match s {
  "foo" => io.println("foo")
  "bar" => io.println("bar")
  _ => io.println("other strings")
}

s = "foobar"
match s {
  "foo" => io.println("foo")
  "bar" => io.println("bar")
  _ => io.println("other strings")
}

/*
ch := 'A'
match ch {
  'A' => io.println("Char A")
}
*/

b := false
match b {
  true => io.println("true")
  false => io.println("false")
}

b = true
match b {
  true => io.println("true")
  false => io.println("false")
}

match true {
  true => io.println("true")
  false => io.println("false")
}

i = 20

match i {
  20 => {
    io.println("i == 100")
    j := i
    sum := 0
    while j > 0 {
      if (j < 10) {
        break
      }
      sum += 1
      j -= 1
    }
    io.println(sum)
  },
  _ => io.println("i != 20"),
}

i = 100

match i {
  1, 3, 100, 300 => io.println("1, 3, 100, 300")
  2, 4, 200, 500 => io.println("2, 4, 200, 500")
  _ => io.println("other value")
}

s2 := "foo"
match s2 {
  "foo", "bar" => io.println("foo | bar")
  _ => io.println("other value")
}

s = "foo"
match s {
  is int => io.println("type is int")
  is string => io.println("type is string")
  _ => io.println("type is others")
}

import "io"
zzz := (100, "foo")
match zzz {
  (_, "foo") => io.println("(_, foo)")
}
match zzz {
  (100, y) => io.println(y)
}
match zzz {
  (x, "foo") => io.println(x)
}
match zzz {
  (x, y) => { io.println(x); io.println(y);},
}

match zzz {
  (100, y) => io.println(y)
  (200, y) => io.println(y)
  (_, y) => {io.println("any of x"); io.println(y);}
}

zzz = (200, "bar")
match zzz {
  (100, y) => io.println(y)
  (200, y) => io.println(y)
  (_, y) => {io.println("any of x"); io.println(y);}
}

zzz = (200, ("ok", "msg"))
match zzz {
  (100, y) => io.println(y)
  (200, y) => io.println(y)
  (_, y) => {io.println("any of x"); io.println(y);}
}

zzz = (300, ("anyone"))
match zzz {
  (100, y) => io.println(y)
  (200, y) => io.println(y)
  (_, y) => {io.println("any of x"); io.println(y);}
  100 => io.println("error")
}

import "io"
r := Result.<int, string>.Ok(100)
match r {
  Result.Ok(x) => {io.print("ok:"); io.println(x);}
  Result.Err(x) => {io.println(x);}
}

r = Result.Err("err:404")
match r {
  Result.Ok(x) => {io.print("ok:"); io.println(x);}
  Result.Err(x) => {io.println(x);}
}

r2 := Result.<int, (int, string)>.Ok(200)
match r2 {
  Result.Ok(x) => {io.print("ok:"); io.println(x);}
  Result.Err(x) => {io.println(x);}
}

r2 = Result.Err((404, "not found"))
match r2 {
  Result.Ok(x) => {io.print("ok:"); io.println(x);}
  Result.Err(x) => {io.println(x);io.println(x.0);io.println(x.1);}
}

enum Color {
  RED,
  GREEN,
  BLUE,
}

color := Color.RED
import "io"
match color {
  Color.RED => io.println("red")
  Color.GREEN => io.println("green")
  Color.BLUE => io.println("blue")
}

if Color.RED ~= color {
  io.println("red")
} else if Color.GREEN ~= color {
  io.println("green")
} else if Color.BLUE ~= color {
  io.println("blue")
}

color = Color.BLUE
match color {
  Color.RED => io.println("red")
  Color.GREEN => io.println("green")
  Color.BLUE => io.println("blue")
}

if Color.RED ~= color {
  io.println("red")
} else if Color.GREEN ~= color {
  io.println("green")
} else if Color.BLUE ~= color {
  io.println("blue")
}

color = Color.GREEN
match color {
  Color.RED => io.println("red")
  Color.GREEN => io.println("green")
  Color.BLUE => io.println("blue")
}

if Color.RED ~= color {
  io.println("red")
} else if Color.GREEN ~= color {
  io.println("green")
} else if Color.BLUE ~= color {
  io.println("blue")
}

class Pet {
  name string
}

class Dog extends Pet {
}

class Cat extends Pet

var pet Pet = new Dog()
match pet {
  is Dog => io.println("is dog")
  is Cat => io.println("is cat")
  _ => io.println("unknown type")
}
